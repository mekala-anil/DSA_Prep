
/*
class iPair {
    int first, second;

    iPair(int first, int second) {
        this.first = first;
        this.second = second;
    }
}
*/

// User function Template for Java
class Solution {
    // Function to find the shortest distance of all the vertices
    // from the source vertex src.
    ArrayList<Integer> dijkstra(ArrayList<ArrayList<iPair>> adj, int src) {
        // first as node
        // second as distance
        int size=adj.size();
        PriorityQueue<iPair>pq=new PriorityQueue<iPair>((x,y)->x.second-y.second);
        ArrayList<Integer>dist=new ArrayList<>();
        for(int i=0; i<size; i++){
            dist.add(Integer.MAX_VALUE);
        }
        pq.offer(new iPair(src, 0));
        dist.set(src, 0);
        
        while(!pq.isEmpty()){
            int node=pq.peek().first;
            int distance=pq.peek().second;
            pq.poll();
            
            for(iPair x:adj.get(node)){
                if((distance+x.second)<dist.get(x.first)){
                    dist.set(x.first, distance+x.second);
                    pq.offer(new iPair(x.first, distance+x.second));
                }
            }
        }
        return dist;
        
    }
}
