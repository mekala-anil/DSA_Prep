/*
Q: https://www.geeksforgeeks.org/problems/shortest-path-in-undirected-graph/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=direct-acyclic-graph
*/

class Pair{
    int first;
    int second;
    Pair(int f, int s){
        first=f;
        second=s;
    }
}
class Solution {

    public int[] shortestPath(int V, int E, int[][] edges) {
        ArrayList<ArrayList<Pair>>adj=new ArrayList<>();
        for(int i=0; i<V; i++){
            adj.add(new ArrayList<Pair>());
        }
        
        for(int i=0; i<E; i++){
            
            int u=edges[i][0];
            int v=edges[i][1];
            int wt=edges[i][2];
            
            adj.get(u).add(new Pair(v, wt));
        }
        
        Stack<Integer>stack=new Stack<>();
        boolean vis[]=new boolean[V];
        
        findToposortDfs(0, vis, stack, adj);
        
        int dist[]=new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[0]=0;
        while(!stack.isEmpty()){
            int node=stack.peek();
            stack.pop();
            int node_wt=dist[node];
            for(Pair p:adj.get(node)){
                
                int v=p.first;
                int wt=p.second;
                
                if((node_wt+wt)<dist[v]){
                    dist[v]=node_wt+wt;
                }
                
            }
        }
        for(int i=0; i<V; i++){
            if(dist[i]==Integer.MAX_VALUE){
                dist[i]=-1;
            }
        }
        return dist;
    }
    
    private void findToposortDfs(int node, boolean vis[], Stack<Integer>stack, ArrayList<ArrayList<Pair>>adj){
        vis[node]=true;
        for(Pair p:adj.get(node)){
            if(vis[p.first]==false){
                findToposortDfs(p.first, vis, stack, adj);
            }
        }
        stack.push(node);
    }
}
